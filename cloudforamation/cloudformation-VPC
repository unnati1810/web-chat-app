AWSTemplateFormatVersion: '2010-09-09'
Description: Setup VPC, subnets, NAT gateway, NACLs, security groups, and AWS Network Firewall for a highly available web-chat application.

Resources:
  # Create a VPC
  WebChatAppVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: WebChatApp-VPC

  # Create public subnets
  WebChatAppPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WebChatAppVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: WebChatApp-Public-Subnet-1

  WebChatAppPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WebChatAppVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: WebChatApp-Public-Subnet-2

  # Create private subnets
  WebChatAppPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WebChatAppVPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: WebChatApp-Private-Subnet-1

  WebChatAppPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WebChatAppVPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: WebChatApp-Private-Subnet-2

  # Create an internet gateway
  WebChatAppInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: WebChatApp-Internet-Gateway

  # Attach the internet gateway to the VPC
  WebChatAppAttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref WebChatAppVPC
      InternetGatewayId: !Ref WebChatAppInternetGateway

  # Create a NAT gateway in the first public subnet
  WebChatAppEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  WebChatAppNATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt WebChatAppEIP.AllocationId
      SubnetId: !Ref WebChatAppPublicSubnet1
      Tags:
        - Key: Name
          Value: WebChatApp-NAT-Gateway

  # Create route tables
  WebChatAppPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WebChatAppVPC
      Tags:
        - Key: Name
          Value: WebChatApp-Public-Route-Table

  WebChatAppPrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WebChatAppVPC
      Tags:
        - Key: Name
          Value: WebChatApp-Private-Route-Table-1

  WebChatAppPrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WebChatAppVPC
      Tags:
        - Key: Name
          Value: WebChatApp-Private-Route-Table-2

  # Create routes
  WebChatAppPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref WebChatAppPublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref WebChatAppInternetGateway

  WebChatAppPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref WebChatAppPrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref WebChatAppNATGateway

  WebChatAppPrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref WebChatAppPrivateRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref WebChatAppNATGateway

  # Associate subnets with route tables
  WebChatAppPublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebChatAppPublicSubnet1
      RouteTableId: !Ref WebChatAppPublicRouteTable

  WebChatAppPublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebChatAppPublicSubnet2
      RouteTableId: !Ref WebChatAppPublicRouteTable

  WebChatAppPrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebChatAppPrivateSubnet1
      RouteTableId: !Ref WebChatAppPrivateRouteTable1

  WebChatAppPrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebChatAppPrivateSubnet2
      RouteTableId: !Ref WebChatAppPrivateRouteTable2

  # Create security group for EC2 instances
  WebChatAppEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for web chat application EC2 instances
      VpcId: !Ref WebChatAppVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: WebChatApp-EC2-SG

  # Create security group for Lambda functions
  WebChatAppLambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for web chat application Lambda functions
      VpcId: !Ref WebChatAppVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '10.0.0.0/16'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: WebChatApp-Lambda-SG

  # Create NACLs
  WebChatAppPublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref WebChatAppVPC
      Tags:
        - Key: Name
          Value: WebChatApp-Public-NACL

  WebChatAppPrivateNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref WebChatAppVPC
      Tags:
        - Key: Name
          Value: WebChatApp-Private-NACL

  # Create NACL entries
  WebChatAppPublicNACLEntryInbound:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref WebChatAppPublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535

  WebChatAppPublicNACLEntryOutbound:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref WebChatAppPublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535

  WebChatAppPrivateNACLEntryInbound:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref WebChatAppPrivateNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '10.0.0.0/16'
      PortRange:
        From: 0
        To: 65535

  WebChatAppPrivateNACLEntryOutbound:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref WebChatAppPrivateNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535

  # AWS Network Firewall
  WebChatAppFirewallPolicy:
    Type: 'AWS::NetworkFirewall::FirewallPolicy'
    Properties:
      FirewallPolicyName: WebChatAppFirewallPolicy
      FirewallPolicy:
        StatelessDefaultActions:
          - aws:pass
        StatelessFragmentDefaultActions:
          - aws:drop
        StatelessRuleGroupReferences: []
        StatefulRuleGroupReferences: []
      Description: Firewall policy for WebChatApp

  WebChatAppFirewall:
    Type: 'AWS::NetworkFirewall::Firewall'
    Properties:
      FirewallName: WebChatAppFirewall
      FirewallPolicyArn: !Ref WebChatAppFirewallPolicy
      VpcId: !Ref WebChatAppVPC
      SubnetMappings:
        - SubnetId: !Ref WebChatAppPublicSubnet1
        - SubnetId: !Ref WebChatAppPublicSubnet2

  WebChatAppFirewallLoggingConfiguration:
    Type: 'AWS::NetworkFirewall::LoggingConfiguration'
    Properties:
      FirewallArn: !Ref WebChatAppFirewall
      LogDestinationConfigs:
        - LogType: ALERT
          LogDestinationType: CloudWatchLogs
          LogDestination:
            logGroup: !Sub /aws/networkfirewall/alert/WebChatApp

Outputs:
  VPCId:
    Description: The ID of the WebChatApp VPC
    Value: !Ref WebChatAppVPC
  PublicSubnet1:
    Description: The ID of the WebChatApp public subnet 1
    Value: !Ref WebChatAppPublicSubnet1
  PublicSubnet2:
    Description: The ID of the WebChatApp public subnet 2
    Value: !Ref WebChatAppPublicSubnet2
  PrivateSubnet1:
    Description: The ID of the WebChatApp private subnet 1
    Value: !Ref WebChatAppPrivateSubnet1
  PrivateSubnet2:
    Description: The ID of the WebChatApp private subnet 2
    Value: !Ref WebChatAppPrivateSubnet2
  SecurityGroupId:
    Description: The ID of the WebChatApp security group
    Value: !Ref WebChatAppEC2SecurityGroup
  InternetGatewayId:
    Description: The ID of the WebChatApp internet gateway
    Value: !Ref WebChatAppInternetGateway
  NatGatewayId:
    Description: The ID of the WebChatApp NAT gateway
    Value: !Ref WebChatAppNATGateway
  FirewallId:
    Description: The ID of the WebChatApp firewall
    Value: !Ref WebChatAppFirewall
