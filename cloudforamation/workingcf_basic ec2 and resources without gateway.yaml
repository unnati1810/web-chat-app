AWSTemplateFormatVersion: "2010-09-09"
Description: ""

Parameters:
  Stage:
    Type: String
    Default: web-chat-app-v3
  AvailabilityZoneEast1A:
    Type: String
    Default: us-east-1a
  AvailabilityZoneEast1B:
    Type: String
    Default: us-east-1b



Resources:

  WebChatVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        -
          Key: "Name"
          Value: !Sub "web-chat-app-${Stage}"

  EC2PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref WebChatVPC
      CidrBlock: "10.0.128.0/20"
      AvailabilityZone: !Ref AvailabilityZoneEast1A
      MapPublicIpOnLaunch: false
      Tags:
        -
          Key: "Name"
          Value: !Sub "subnet-private1-${AvailabilityZoneEast1A}-${Stage}"

  EC2PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref WebChatVPC
      CidrBlock: "10.0.0.0/20"
      AvailabilityZone: !Ref AvailabilityZoneEast1A
      MapPublicIpOnLaunch: true
      Tags:
        -
          Key: "Name"
          Value: !Sub "subnet-public1-${AvailabilityZoneEast1A}-${Stage}"

  EC2PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.16.0/20"
      VpcId: !Ref WebChatVPC
      AvailabilityZone: !Ref AvailabilityZoneEast1B
      MapPublicIpOnLaunch: false
      Tags:
        -
          Key: "Name"
          Value: !Sub "subnet-public2-${AvailabilityZoneEast1B}-${Stage}"

  #will see this
  EC2PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.144.0/20"
      VpcId: !Ref WebChatVPC
      AvailabilityZone: !Ref AvailabilityZoneEast1B
      MapPublicIpOnLaunch: false
      Tags:
        -
          Key: "Name"
          Value: !Sub "subnet-private2-${AvailabilityZoneEast1B}-${Stage}"

  WebChatInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Sub "vpc-igw-${Stage}"


  WebChatInternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref WebChatInternetGateway
      VpcId: !Ref WebChatVPC



  EC2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref WebChatVPC
      Tags:
        -
          Key: "Name"
          Value: !Sub "vpc-rtb-private2-${AvailabilityZoneEast1B}-${Stage}"

  EC2RouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref WebChatVPC
      Tags:
        -
          Key: "Name"
          Value: !Sub "vpc-rtb-public-${Stage}"

  #Route, Association, Subnetroutetableassociation
  EC2RouteTable3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref WebChatVPC
      Tags:
        -
          Key: "Name"
          Value: !Sub "vpc-rtb-private1-${AvailabilityZoneEast1A}-${Stage}"


  #    EC2Route2:
  #      Type: "AWS::EC2::Route"
  #      Properties:
  #        DestinationCidrBlock: "0.0.0.0/0"
  #        GatewayId: !Ref EC2VPCEndpoint2
  #        RouteTableId: !Ref EC2RouteTable
  #
  #    EC2Route3:
  #      Type: "AWS::EC2::Route"
  #      Properties:
  #        DestinationCidrBlock: "0.0.0.0/0"
  #        GatewayId: !Ref EC2VPCEndpoint
  #        RouteTableId: !Ref EC2RouteTable

  EC2Route4:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref WebChatInternetGateway
      RouteTableId: !Ref EC2RouteTable2

  EC2SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref EC2PrivateSubnet2

  EC2SubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable2
      SubnetId: !Ref EC2PublicSubnet2

  EC2SubnetRouteTableAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable2
      SubnetId: !Ref EC2PublicSubnet1

  EC2SubnetRouteTableAssociation4:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable3
      SubnetId: !Ref EC2PrivateSubnet1

  EC2EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"


  EC2NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref EC2PublicSubnet1
      Tags:
        -
          Key: "Name"
          Value: !Sub "nat-gateway-${Stage}"
      AllocationId: !GetAtt EC2EIP.AllocationId


  EC2Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref EC2NatGateway
      RouteTableId: !Ref EC2RouteTable
  #
  #
  #  EC2EIPAssociation:
  #    Type: "AWS::EC2::EIPAssociation"
  #    Properties:
  #      AllocationId: !GetAtt EC2EIP.AllocationId
  #      NetworkInterfaceId:  !Ref EC2NetworkInterface7


  EC2VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Gateway"
      VpcId: !Ref WebChatVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
      RouteTableIds:
        - !Ref EC2RouteTable
        - !Ref EC2RouteTable3
      PrivateDnsEnabled: false


  EC2VPCEndpoint2:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Gateway"
      VpcId: !Ref WebChatVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
      RouteTableIds:
        - !Ref EC2RouteTable
        - !Ref EC2RouteTable2
        - !Ref EC2RouteTable3
      PrivateDnsEnabled: false


  #    EC2Instance:
  #        Type: "AWS::EC2::Instance"
  #        Properties:
  #            ImageId: "ami-0ba9883b710b05ac6"
  #            InstanceType: "t2.small"
  #            KeyName: "web-chat-app2"
  #            AvailabilityZone: !Ref AvailabilityZoneEast1A
  #            SubnetId: !Ref EC2PublicSubnet1
  #            SecurityGroupIds:
  #              - !Ref EC2SecurityGroup
  #            Tags:
  #              -
  #                Key: "Name"
  #                Value: !Sub "ec2-web-chat-${Stage}"
  #            HibernationOptions:
  #              Configured: false
  #            EnclaveOptions:
  #              Enabled: false
  #            PlacementGroupName: !Ref EC2PlacementGroup
  #            Tenancy: "default"
  #            EbsOptimized: false
  #            SourceDestCheck: true
  #            BlockDeviceMappings:
  #              -
  #                DeviceName: "/dev/xvda"
  #                Ebs:
  #                    Encrypted: false
  #                    VolumeSize: 8
  #                    SnapshotId: "snap-046c3015dc5bd6fe7"
  #                    VolumeType: "gp3"
  #                    DeleteOnTermination: true
  #            IamInstanceProfile: "web-chat-app-ec2"


  # EC2 Instance
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0ba9883b710b05ac6" # ubuntu server
      InstanceType: "t2.small"
      KeyName: "web-chat-app2"
      AvailabilityZone: !Ref AvailabilityZoneEast1A
      Tenancy: "default"
      SubnetId: !Ref EC2PublicSubnet1
      EbsOptimized: false
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SourceDestCheck: true
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            Encrypted: false
            VolumeSize: 8
            SnapshotId: "snap-046c3015dc5bd6fe7"
            VolumeType: "gp3"
            DeleteOnTermination: true
      Tags:
        - Key: "Name"
          Value: !Sub "ec2-web-chat-${Stage}"
      HibernationOptions:
        Configured: false
      EnclaveOptions:
        Enabled: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo dnf update -y
          sudo dnf install -y git
          sudo dnf install -y nodejs npm
          sudo npm install -g npm@latest
          sudo dnf install -y nginx
          sudo mkdir -p /usr/share/nginx/html/my-react-app
          echo 'server {
            listen 80;
            listen [::]:80;
            root /usr/share/nginx/html/my-react-app/build;
          
            location / {
            try_files $uri /index.html;
          }
          }' | sudo tee /etc/nginx/conf.d/react.conf >/dev/null
          cd /home/ec2-user
          mkdir my-app
          cd my-app
          sudo git clone https://github.com/unnati1810/web-chat-app.git
          cd web-chat-app
          cd client
          sudo npm install
          sudo npm run build
          sudo npm run export
          sudo mkdir -p /usr/share/nginx/html/my-react-app
          sudo cp -R out/* /usr/share/nginx/html/my-react-app/
          sudo tee /etc/nginx/conf.d/react.conf <<EOF
            server {
            listen 80;
            listen [::]:80;
          
            root /usr/share/nginx/html/my-react-app; # Ensure this points to the correct directory
            index index.html;
          
            location / {
            try_files \$uri \$uri/ /index.html;
          }
          
          # Error and access logs
            error_log /var/log/nginx/error.log;
            access_log /var/log/nginx/access.log;
          }
          EOF
          sudo nginx -t 
          sudo systemctl start nginx
          sudo systemctl enable nginx
          sudo systemctl restart nginx
          sudo systemctl reload nginx
  

  EC2NetworkInterface2:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      SubnetId: !Ref EC2PublicSubnet1
      SourceDestCheck: true
      GroupSet:
        - !Ref EC2SecurityGroup2

  #    EC2Instance2:
  #        Type: "AWS::EC2::Instance"
  #        Properties:
  #            ImageId: "ami-05babe76427dd31bd"
  #            InstanceType: "t2.small"
  #            KeyName: "web-chat-app2"
  #            AvailabilityZone: !Sub "${AWS::Region}b"
  #            PlacementGroupName: !Ref EC2PlacementGroup
  #            Tenancy: "default"
  #            SubnetId: "subnet-09be04b7f8a806b5a"
  #            EbsOptimized: false
  #            SecurityGroupIds:
  #              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"
  #            SourceDestCheck: true
  #            BlockDeviceMappings:
  #              -
  #                DeviceName: "/dev/xvda"
  #                Ebs:
  #                    Encrypted: false
  #                    VolumeSize: 8
  #                    SnapshotId: "snap-0bcdbc05b8398d7b1"
  #                    VolumeType: "gp3"
  #                    DeleteOnTermination: true
  #            Tags:
  #              -
  #                Key: "Name"
  #                Value: "web-chat-app-ec2-using-AMI"
  #            HibernationOptions:
  #                Configured: false
  #            EnclaveOptions:
  #                Enabled: false
  #
  #    EC2Instance3:
  #        Type: "AWS::EC2::Instance"
  #        Properties:
  #            ImageId: "ami-0427090fd1714168b"
  #            InstanceType: "t2.small"
  #            KeyName: "web-chat-app2"
  #            AvailabilityZone: !Sub "${AWS::Region}a"
  #            PlacementGroupName: !Ref EC2PlacementGroup
  #            Tenancy: "default"
  #            SubnetId: "subnet-09b4f49acc51fc7e8"
  #            EbsOptimized: false
  #            SecurityGroupIds:
  #              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"
  #            SourceDestCheck: true
  #            BlockDeviceMappings:
  #              -
  #                DeviceName: "/dev/xvda"
  #                Ebs:
  #                    Encrypted: false
  #                    VolumeSize: 8
  #                    SnapshotId: "snap-098b3fcd06a2d3df7"
  #                    VolumeType: "gp3"
  #                    DeleteOnTermination: true
  #            Tags:
  #              -
  #                Key: "Name"
  #                Value: "web-chat-application"
  #            HibernationOptions:
  #                Configured: false
  #            EnclaveOptions:
  #                Enabled: false

  ElasticLoadBalancingV2LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name:  !Sub "lb-${Stage}"
      Scheme: "internet-facing"
      Type: "application"
      Subnets:
        - !Ref EC2PublicSubnet1
        - !Ref EC2PublicSubnet2
      SecurityGroups:
        - !Ref EC2SecurityGroup
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        -
          Key: "access_logs.s3.enabled"
          Value: "false"
        -
          Key: "idle_timeout.timeout_seconds"
          Value: "60"
        -
          Key: "deletion_protection.enabled"
          Value: "false"
        -
          Key: "routing.http2.enabled"
          Value: "true"
        -
          Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
        -
          Key: "routing.http.xff_client_port.enabled"
          Value: "false"
        -
          Key: "routing.http.preserve_host_header.enabled"
          Value: "false"
        -
          Key: "routing.http.xff_header_processing.mode"
          Value: "append"
        -
          Key: "load_balancing.cross_zone.enabled"
          Value: "true"
        -
          Key: "routing.http.desync_mitigation_mode"
          Value: "defensive"
        -
          Key: "client_keep_alive.seconds"
          Value: "3600"
        -
          Key: "waf.fail_open.enabled"
          Value: "false"
        -
          Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
          Value: "false"
        -
          Key: "connection_logs.s3.enabled"
          Value: "false"

  ElasticLoadBalancingV2Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        -
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
          Type: "forward"

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription:  !Sub "web-chat-app-sg-${Stage}"
      GroupName: !Sub "web-chat-app-sg-${Stage}"
      VpcId: !Ref WebChatVPC
      SecurityGroupIngress:
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 53
          IpProtocol: "udp"
          ToPort: 53
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 53
          IpProtocol: "tcp"
          ToPort: 53
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 3000
          IpProtocol: "tcp"
          ToPort: 3000
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049
      SecurityGroupEgress:
        -
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 53
          IpProtocol: "udp"
          ToPort: 53
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 53
          IpProtocol: "tcp"
          ToPort: 53
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 3000
          IpProtocol: "tcp"
          ToPort: 3000

  EC2SecurityGroup2:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "web-chat-app-sg-EFS-${Stage}"
      GroupName: !Sub "web-chat-app-sg-EFS-${Stage}"
      VpcId: !Ref WebChatVPC
      SecurityGroupIngress:
        -
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049
      SecurityGroupEgress:
        -
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
        -
          DestinationSecurityGroupId: !Ref EC2SecurityGroup
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049

  EC2LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub "launch-template-${Stage}"
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/LabInstanceProfile"
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        KeyName: "web-chat-app2"
        ImageId: "ami-0ba9883b710b05ac6"
        InstanceType: "t2.small"

  ElasticLoadBalancingV2TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "80"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 5
      TargetType: "instance"
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref WebChatVPC
      Name: !Sub "tg-${Stage}"
      HealthCheckEnabled: true
      TargetGroupAttributes:
        -
          Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
          Value: "off"
        -
          Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        -
          Key: "stickiness.type"
          Value: "lb_cookie"
        -
          Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        -
          Key: "slow_start.duration_seconds"
          Value: "0"
        -
          Key: "stickiness.app_cookie.duration_seconds"
          Value: "86400"
        -
          Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
          Value: "off"
        -
          Key: "load_balancing.cross_zone.enabled"
          Value: "use_load_balancer_configuration"
        -
          Key: "load_balancing.algorithm.type"
          Value: "round_robin"
        -
          Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
          Value: "1"
        -
          Key: "stickiness.enabled"
          Value: "false"
        -
          Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
          Value: "1"
        -
          Key: "load_balancing.algorithm.anomaly_mitigation"
          Value: "off"
        -
          Key: "stickiness.app_cookie.cookie_name"
          Value: ""



  EC2NetworkInterface:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      SubnetId: !Ref EC2PublicSubnet1
      SourceDestCheck: true
      GroupSet:
        - !Ref EC2SecurityGroup2

  EC2NetworkInterface3:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      SubnetId: !Ref EC2PublicSubnet1
      SourceDestCheck: true
      GroupSet:
        - !Ref EC2SecurityGroup2

  EC2NetworkInterface4:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      SubnetId: !Ref EC2PrivateSubnet1
      SourceDestCheck: true
      GroupSet:
        - !Ref EC2SecurityGroup2

  EC2NetworkInterface5:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      SubnetId: !Ref EC2PublicSubnet2
      SourceDestCheck: true
      GroupSet:
        - !Ref EC2SecurityGroup2


  EC2PlacementGroup:
    Type: "AWS::EC2::PlacementGroup"
    Properties:
      GroupName: !Sub "placement-group-${Stage}"
      Strategy: "partition"


  EFSMountTarget:
    Type: "AWS::EFS::MountTarget"
    Properties:
      FileSystemId: !Ref EFSFileSystem
      IpAddress: "10.0.7.189"
      SecurityGroups:
        - !Ref EC2SecurityGroup2
      SubnetId: !Ref EC2PublicSubnet1

  EFSMountTarget2:
    Type: "AWS::EFS::MountTarget"
    Properties:
      FileSystemId: !Ref EFSFileSystem
      IpAddress: "10.0.27.193"
      SecurityGroups:
        - !Ref EC2SecurityGroup2
      SubnetId: !Ref EC2PublicSubnet2


  EFSFileSystem:
    Type: "AWS::EFS::FileSystem"
    Properties:
      PerformanceMode: "generalPurpose"
      Encrypted: true
      KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/a1c97b9b-87b3-413d-87ad-82fe2a8e6d99"
      ThroughputMode: "elastic"
      FileSystemTags:
        -
          Key: "Name"
          Value:  !Sub "EFS-${Stage}"

