AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Name"
                Value: "web-chat-app-vpc-vpc"

    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
            CidrBlock: "10.0.128.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "web-chat-app-vpc-subnet-private1-${EC2Subnet2.AvailabilityZone}"

    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            CidrBlock: "10.0.0.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "web-chat-app-vpc-subnet-public1-${EC2Instance.AvailabilityZone}"

    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet4.AvailabilityZone
            CidrBlock: "10.0.16.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "web-chat-app-vpc-subnet-public2-${EC2Subnet4.AvailabilityZone}"

    EC2Subnet4:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance2.AvailabilityZone
            CidrBlock: "10.0.144.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "web-chat-app-vpc-subnet-private2-${EC2Instance2.AvailabilityZone}"

    EC2InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags: 
              - 
                Key: "Name"
                Value: "web-chat-app-vpc-igw"

    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "web-chat-app-vpc-rtb-private2-${EC2Subnet3.AvailabilityZone}"

    EC2RouteTable2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "web-chat-app-vpc-rtb-public"

    EC2RouteTable3:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "web-chat-app-vpc-rtb-private1-${EC2Subnet.AvailabilityZone}"

    EC2NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet2
            Tags: 
              - 
                Key: "Name"
                Value: "web-chat-app-nat-gateway"
            AllocationId: !GetAtt EC2EIP.AllocationId

    EC2VPCEndpoint:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            VpcEndpointType: "Gateway"
            VpcId: !Ref EC2VPC
            ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
            PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
            RouteTableIds: 
              - !Ref EC2RouteTable
              - !Ref EC2RouteTable3
            PrivateDnsEnabled: false

    EC2Instance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-0ba9883b710b05ac6"
            InstanceType: "t2.small"
            KeyName: "web-chat-app2"
            AvailabilityZone: !GetAtt EC2Instance3.AvailabilityZone
            PlacementGroupName: !Ref EC2PlacementGroup
            Tenancy: "default"
            SubnetId: "subnet-0a661d6af03f277c8"
            EbsOptimized: false
            SecurityGroupIds: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/xvda"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 8
                    SnapshotId: "snap-046c3015dc5bd6fe7"
                    VolumeType: "gp3"
                    DeleteOnTermination: true
            IamInstanceProfile: "web-chat-app-ec2"
            Tags: 
              - 
                Key: "Name"
                Value: "web-chat-placement-n-reservation"
            HibernationOptions: 
                Configured: false
            EnclaveOptions: 
                Enabled: false

    EC2Instance2:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-05babe76427dd31bd"
            InstanceType: "t2.small"
            KeyName: "web-chat-app2"
            AvailabilityZone: !Sub "${AWS::Region}b"
            PlacementGroupName: !Ref EC2PlacementGroup
            Tenancy: "default"
            SubnetId: "subnet-09be04b7f8a806b5a"
            EbsOptimized: false
            SecurityGroupIds: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/xvda"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 8
                    SnapshotId: "snap-0bcdbc05b8398d7b1"
                    VolumeType: "gp3"
                    DeleteOnTermination: true
            Tags: 
              - 
                Key: "Name"
                Value: "web-chat-app-ec2-using-AMI"
            HibernationOptions: 
                Configured: false
            EnclaveOptions: 
                Enabled: false

    EC2Instance3:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-0427090fd1714168b"
            InstanceType: "t2.small"
            KeyName: "web-chat-app2"
            AvailabilityZone: !Sub "${AWS::Region}a"
            PlacementGroupName: !Ref EC2PlacementGroup
            Tenancy: "default"
            SubnetId: "subnet-09b4f49acc51fc7e8"
            EbsOptimized: false
            SecurityGroupIds: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/xvda"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 8
                    SnapshotId: "snap-098b3fcd06a2d3df7"
                    VolumeType: "gp3"
                    DeleteOnTermination: true
            Tags: 
              - 
                Key: "Name"
                Value: "web-chat-application"
            HibernationOptions: 
                Configured: false
            EnclaveOptions: 
                Enabled: false

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "web-chat-app-as-lb"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - "subnet-09b4f49acc51fc7e8"
              - "subnet-09be04b7f8a806b5a"
            SecurityGroups: 
              - !Ref EC2SecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "client_keep_alive.seconds"
                Value: "3600"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"
              - 
                Key: "connection_logs.s3.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Web Chat App Security Group"
            GroupName: "web-chat-app-sg"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 53
                IpProtocol: "udp"
                ToPort: 53
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 53
                IpProtocol: "tcp"
                ToPort: 53
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 3000
                IpProtocol: "tcp"
                ToPort: 3000
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 2049
                IpProtocol: "tcp"
                ToPort: 2049
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup2
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 2049
                IpProtocol: "tcp"
                ToPort: 2049
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 53
                IpProtocol: "udp"
                ToPort: 53
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 53
                IpProtocol: "tcp"
                ToPort: 53
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 3000
                IpProtocol: "tcp"
                ToPort: 3000
              - 
                DestinationSecurityGroupId: !Ref EC2SecurityGroup2
                FromPort: 2049
                IpProtocol: "tcp"
                ToPort: 2049

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "web-chat-app-sg-EFS"
            GroupName: "web-chat-app-sg-EFS"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: "sg-07790c7e11a3758ee"
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 2049
                IpProtocol: "tcp"
                ToPort: 2049
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              - 
                DestinationSecurityGroupId: "sg-07790c7e11a3758ee"
                FromPort: 2049
                IpProtocol: "tcp"
                ToPort: 2049

    EC2LaunchTemplate:
        Type: "AWS::EC2::LaunchTemplate"
        Properties:
            LaunchTemplateName: "web-chat-app-launch-template"
            LaunchTemplateData: 
                IamInstanceProfile: 
                    Arn: !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/LabInstanceProfile"
                SecurityGroupIds: 
                  - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"
                KeyName: "web-chat-app2"
                ImageId: "ami-05babe76427dd31bd"
                InstanceType: "t2.small"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "80"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 5
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "web-chat-app-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "load_balancing.algorithm.anomaly_mitigation"
                Value: "off"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""

    EC2NetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "EFS mount target for ${EFSFileSystem} (${EFSMountTarget})"
            PrivateIpAddress: !GetAtt EFSMountTarget.IpAddress
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: !GetAtt EFSMountTarget.IpAddress
                Primary: true
            SubnetId: !Ref EC2Subnet2
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface2:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: !GetAtt EC2Instance3.PrivateIp
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: !GetAtt EC2Instance3.PrivateIp
                Primary: true
            SubnetId: !Ref EC2Subnet2
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2NetworkInterface3:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/ef921cdfeff6642d"
            PrivateIpAddress: "10.0.9.70"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.0.9.70"
                Primary: true
            SubnetId: !Ref EC2Subnet2
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2NetworkInterface4:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: !GetAtt EC2Instance.PrivateIp
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: !GetAtt EC2Instance.PrivateIp
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2NetworkInterface5:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "EFS mount target for ${EFSFileSystem} (${EFSMountTarget2})"
            PrivateIpAddress: !GetAtt EFSMountTarget2.IpAddress
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: !GetAtt EFSMountTarget2.IpAddress
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface6:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: !GetAtt EC2Instance2.PrivateIp
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: !GetAtt EC2Instance2.PrivateIp
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2PlacementGroup:
        Type: "AWS::EC2::PlacementGroup"
        Properties:
            Strategy: "partition"

    EC2KeyPair:
        Type: "AWS::EC2::KeyPair"
        Properties:
            KeyName: "web-chat-app2"
            KeyType: "rsa"

    EFSFileSystem:
        Type: "AWS::EFS::FileSystem"
        Properties:
            PerformanceMode: "generalPurpose"
            Encrypted: true
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/a1c97b9b-87b3-413d-87ad-82fe2a8e6d99"
            ThroughputMode: "elastic"
            FileSystemTags: 
              - 
                Key: "Name"
                Value: "web-chat-app-EFS"
              - 
                Key: "aws:elasticfilesystem:default-backup"
                Value: "enabled"

    EC2VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref EC2InternetGateway
            VpcId: !Ref EC2VPC

    EC2NetworkInterface7:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "Interface for NAT Gateway ${EC2NatGateway}"
            PrivateIpAddress: "10.0.2.250"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.0.2.250"
                Primary: true
            SubnetId: !Ref EC2Subnet2
            SourceDestCheck: false

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref EC2NatGateway
            RouteTableId: !Ref EC2RouteTable

    EC2Route2:
        Type: "AWS::EC2::Route"
        Properties:
            GatewayId: "vpce-0607c792ea7babffa"
            RouteTableId: !Ref EC2RouteTable

    EC2Route3:
        Type: "AWS::EC2::Route"
        Properties:
            GatewayId: "vpce-0fa31ee5a5a2ff4b3"
            RouteTableId: !Ref EC2RouteTable

    EC2Route4:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTable2

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet4

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet3

    EC2SubnetRouteTableAssociation3:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet2

    EC2SubnetRouteTableAssociation4:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable3
            SubnetId: !Ref EC2Subnet

    EC2VPCEndpoint2:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            VpcEndpointType: "Gateway"
            VpcId: !Ref EC2VPC
            ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
            PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
            RouteTableIds:
              - !Ref EC2RouteTable
              - !Ref EC2RouteTable2
              - !Ref EC2RouteTable3
            PrivateDnsEnabled: false

    EC2EIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    EC2EIPAssociation:
        Type: "AWS::EC2::EIPAssociation"
        Properties:
            AllocationId: !GetAtt EC2EIP.AllocationId
            NetworkInterfaceId: "eni-00b3c36bc20e55d39"
            PrivateIpAddress: "10.0.2.250"

    EC2EIP2:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"
            InstanceId: !Ref EC2Instance2

    EC2EIPAssociation2:
        Type: "AWS::EC2::EIPAssociation"
        Properties:
            AllocationId: !GetAtt EC2EIP2.AllocationId
            InstanceId: !Ref EC2Instance2
            NetworkInterfaceId: "eni-02d7ff4e8ebf30cdb"
            PrivateIpAddress: !GetAtt EC2Instance2.PrivateIp

    EC2EIP3:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    EFSMountTarget:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: !Ref EFSFileSystem
            IpAddress: "10.0.7.189"
            SecurityGroups:
              - !Ref EC2SecurityGroup2
            SubnetId: !Ref EC2Subnet2

    EFSMountTarget2:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: !Ref EFSFileSystem
            IpAddress: "10.0.27.193"
            SecurityGroups:
              - !Ref EC2SecurityGroup2
            SubnetId: !Ref EC2Subnet3

